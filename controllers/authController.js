// On utilise une fonction intÃ©grÃ©e dans Node pour 'promessifier'
// on dÃ©structure l'objet Â« util Â» pour prendre Â« promisify Â» directement d'Â« util Â»
const { promisify } = require('util');

const jwt = require('jsonwebtoken');
const User = require('./../models/userModel');
const catchAsync = require('./../utils/catchAsync');
const AppError = require('./../utils/appError');

const signToken = id => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN
  });
};

exports.signup = catchAsync(async (req, res, next) => {
  const newUser = await User.create({
    name: req.body.name,
    email: req.body.email,
    password: req.body.password,
    passwordConfirm: req.body.passwordConfirm,
    passwordChangedAt: req.body.passwordChangedAt
  });

  const token = signToken(newUser._id);

  res.status(201).json({
    status: 'succes',
    token,
    data: {
      user: newUser
    }
  });
});

exports.login = catchAsync(async (req, res, next) => {
  const { email, password } = req.body;

  if (!email || !password) {
    return next(new AppError('Please provide email and password!', 400));
  }

  const user = await User.findOne({ email }).select('+password');
  if (!user || !(await user.correctPassword(password, user.password))) {
    return next(new AppError('Incorrect email or password!', 401));
  }

  const token = signToken(user._id);

  res.status(200).json({
    status: 'success',
    token
  });
});

exports.protect = catchAsync(async (req, res, next) => {
  // 1) On vÃ©rifie si le token existe

  // (Note: On dÃ©finit la variable en dehors du bloc 'if'
  // si on le faisait dans le bloc 'if', on ne pourrait pas l'utiliser en dehors)
  let token;

  // On essaye de rÃ©cuperer le token depuis les en-tÃªtes  ('Headers')
  // (dans le 'Headers' on met une clef  Â« Authorization Â» et la valeur Â« Bearer xxxxxTOKENxxxxx Â»)
  // on verifie donc si il y Ã  la clef Â« Authorization Â» dans les en-tÃªtes et si sa valeur commence bien par Â« Bearer Â»
  if (
    req.headers.authorization &&
    req.headers.authorization.startsWith('Bearer')
  ) {
    // Pour rÃ©cuperer le token, on dÃ©coupe ('split') la chaÃ®ne de caractÃ¨re au niveau de l'espace
    // et on rÃ©cupÃ¨re la deuxiÃ¨me valeur du tableau ("[1]") ainsi crÃ©Ã© (par '.split())
    // (et on rÃ©assigne la valeur de la variable 'token' dÃ©clarÃ©e en dehors du bloc)
    token = req.headers.authorization.split(' ')[1];
  }
  // console.log('ğŸ’¥ğŸ’¥ token ğŸ’¥ğŸ’¥ ==> ', token);

  if (!token) {
    return next(
      new AppError('You are not logged in! Please log in to get access.', 401)
    );
  }

  // 2) On vÃ©rifie si le token est valide

  // On "promessifie" cette fonction (avec une fonction intÃ©grÃ©e Ã  Node)
  // afin qu'elle nous retourne une promesse pour pouvoir utiliser 'async/await'

  // On passe en 1er le token a verifier, en 2Ã¨me la clef secrÃ¨te,
  // en 3Ã©me une fonction callback appelÃ©e dÃ¨s que la vÃ©rification est complÃ¨te
  const decoded = await promisify(jwt.verify)(token, process.env.JWT_SECRET);
  // console.log('ğŸ’¥ğŸ’¥ decoded ğŸ’¥ğŸ’¥ ==> ', decoded);

  // 3) On vÃ©rifie si l'utilisateur existe toujours
  // Â« decoded.id Â» est l'ID que l'on rÃ©cupÃ¨re depuis le token
  const currentUser = await User.findById(decoded.id);
  if (!currentUser) {
    return next(
      new AppError(
        'The user belonging to this token does no longer exist.',
        401
      )
    );
  }

  // 4) On vÃ©rifie si l'utilisateur a changÃ© son MDP aprÃ¨s que le token ait Ã©tÃ© publiÃ©
  // On a crÃ©e une "instance method" dans le 'userModel.js'
  // (une mÃ©thode qui sera valable dans tous les documents)
  // (les documents sont des instances d'un 'model')
  // NOTE: Â« decoded.iat Â» est le timestamp (Â« Issued AT Â») de JWT rÃ©cupÃ©rÃ© depuis le token
  // si le MDP a changÃ©, on retourne une erreur (Â« changedPasswordAfter Â» retournera 'true')
  if (currentUser.changedPasswordAfter(decoded.iat)) {
    return next(
      new AppError('User recently changed password! Please log in again', 401)
    );
  }

  // avec "next" on poursuit donc avec le gestionnaire de route qui suit
  // ce qui signifie qu'on autorise l'accÃ¨s Ã  cette route protÃ©gÃ©e
  // on met toutes les donnÃ©es de l'utilisateur dans la requÃªte
  req.user = currentUser;
  next();
});
